---
// Style sheets
import '@/styles/base.css';

// Components
import { SEO } from 'astro-seo';
import Preloader from '@/components/Preloader.astro';
import TimeCapsuleForm from '@/components/time-capsule/TimeCapsuleForm.astro';
import TimeCapsuleModal from '@/components/time-capsule/TimeCapsuleModal.astro';
---

<html lang="zh">
  <head>
    <SEO title="Time Capsule" charset="utf-8" />
    <link href="/favicon.svg" rel="icon" />
    <meta content="width=device-width,initial-scale=1" name="viewport" />
    <meta content={Astro.generator} name="generator" />
    <script
      src="https://cdn.jsdelivr.net/npm/animejs@3.2.2/lib/anime.min.js"
      defer
      is:inline></script>
  </head>
  <body class="bg-neutral-900 font-misans text-white">
    <Preloader />
    <TimeCapsuleForm />
    <TimeCapsuleModal />
    <script>
      import {
        hideModal,
        showBlobModal,
        showErrorModal,
        showImageModal,
        showTextModal
      } from '@/scripts/time-capsule-modal';
      import { sha256 } from 'js-sha256';

      // Add listener
      document
        .querySelector<HTMLButtonElement>('#query-btn')!
        .addEventListener('click', (): void => {
          // Disable button
          document.querySelector<HTMLButtonElement>('#query-btn')!.disabled =
            true;

          // Get input data
          const id: string =
            document.querySelector<HTMLInputElement>('#entry-id-in')!.value;
          const passwd: string =
            document.querySelector<HTMLInputElement>('#passwd-in')!.value;

          // If any empty
          if (id.length === 0 || passwd.length === 0) {
            showErrorModal("Can't be empty");
            return;
          }

          // Try get
          fetch('/pool/' + sha256(sha256(id) + sha256(passwd)), {
            method: 'GET',
            headers: {
              'Cache-Control': 'no-cache',
              'Pragma': 'no-cache'
            }
          })
            .then((res: Response): Promise<ArrayBuffer> => {
              if (!res.ok) {
                throw 'Not Found';
              }
              return res.arrayBuffer();
            })
            .then((buffer: ArrayBuffer): void => {
              // Get file name
              const fileName: [string, number] | null = extractLine(buffer);
              if (fileName === null) {
                throw 'File Corrupted';
              }
              buffer = buffer.slice(fileName[1]);

              // Get file mime
              const mime: [string, number] | null = extractLine(buffer);
              if (mime === null) {
                throw 'File Corrupted';
              }
              buffer = buffer.slice(mime[1]);

              // Check mime
              if (mime[0].startsWith('text')) {
                const text: string = new TextDecoder().decode(buffer);
                showTextModal(fileName[0], text);
              } else if (mime[0].startsWith('image')) {
                const b64: string = new TextDecoder().decode(buffer);
                showImageModal(fileName[0], b64);
              } else {
                showBlobModal();

                const blob: Blob = new Blob([buffer], { type: mime[0] });
                const url: string = URL.createObjectURL(blob);
                const el: HTMLAnchorElement = document.createElement('a');
                el.download = fileName[0];
                el.href = url;
                el.click();
                URL.revokeObjectURL(url);
              }
            })
            .catch((err: unknown): void => {
              showErrorModal(typeof err === 'string' ? err : 'Error');
            });
        });
      document
        .querySelector<HTMLDivElement>('#modal-bg')!
        .addEventListener('click', hideModal);

      // Extract line
      const extractLine = (buffer: ArrayBuffer): [string, number] | null => {
        const decoder: TextDecoder = new TextDecoder();
        const view: Uint8Array = new Uint8Array(buffer);

        let str: string = '';
        let found: boolean = false;
        let i: number = 0;
        while (i < view.length) {
          if (view[i] === 10) {
            found = true;
            i++;
            break;
          }
          str += decoder.decode(view.subarray(i, i + 1));
          i++;
        }

        return found ? [str, i] : null;
      };
    </script>
  </body>
</html>
