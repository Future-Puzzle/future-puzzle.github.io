---
import { avatars } from '@/utils/meta';
import moment from 'moment';

// Style sheets
import '@/styles/markdown.css';

// Layouts
import BaseLayout from '@/layouts/BaseLayout.astro';

// Components
import { Icon } from 'astro-icon/components';
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';

// Types
type Props = {
  title: string;
  date: Date;
  tags?: string[];
  length: number;
  author: CollectionEntry<'authors'>;
};

// Injects
const { title, date, tags, length, author } = Astro.props;

// Functions
const formatNumber = (num: number, unit: string): string => {
  if (num < 1000) {
    return num.toString() + ' ' + unit;
  } else if (num < 1000000) {
    return (num / 1000).toFixed(1) + 'k ' + unit;
  } else {
    return (num / 1000000).toFixed(1) + 'm ' + unit;
  }
};
---

<BaseLayout title={`${title} - FUTURE 攻坚组`}>
  <main class="mx-auto my-12 w-1/2">
    <button
      class="flex items-center text-neutral-400 transition-colors hover:text-white"
      id="back-posts-btn">
      <Icon class="text-2xl" name="mdi:arrow-back" />
      <span>返回</span>
    </button>
    <h1 class="font-bold mt-8 text-3xl">{title}</h1>
    <div
      class="border-b border-neutral-700 flex items-center gap-4 text-neutral-500 text-sm">
      <div class="flex items-center gap-1">
        <Icon name="mdi:calendar" />
        <span title={date.toISOString()}
          >{moment(date).format('YYYY/MM/DD')}</span
        >
      </div>
      {
        tags && (
          <div class="flex gap-1 items-center">
            <Icon name="mdi:tag" />
            {tags.map((v: string) => (
              <span>{v}</span>
            ))}
          </div>
        )
      }
      <div class="flex items-center gap-1">
        <Icon name="mdi:text" />
        <span title={length.toString()}>{formatNumber(length, '字')}</span>
      </div>
    </div>
    <div class="flex flex-col my-4">
      <div class="flex items-center">
        {
          author.data.avatar.startsWith('@avatars/') ? (
            <Image
              alt="avatar"
              class="h-[60px] rounded-full transition-transform w-[60px] hover:scale-110"
              src={avatars[
                author.data.avatar.replace(/^@avatars/, '/src/assets/avatars')
              ]()}
            />
          ) : (
            <Image
              alt="avatar"
              class="h-[60px] rounded-full transition-transform w-[60px] hover:scale-110"
              height="200"
              src={author.data.avatar}
              width="200"
            />
          )
        }
        <div class="flex flex-col ml-4">
          <h1 class="font-bold">{author.data.name}</h1>
          <p class="text-sm text-neutral-400">{author.data.intro}</p>
          <div class="flex gap-2 items-center mt-1 text-sm">
            {
              author.data.urls?.map(({ name, url }) => (
                <a href={url} rel="nofollow noopener noreferer" target="_blank">
                  {name}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>
    <article class="my-12">
      <slot />
    </article>
    <div class="font-bold mt-8 text-center text-neutral-700 select-none">
      End of Post
    </div>
  </main>
</BaseLayout>

<script>
  import { navigate } from 'astro:transitions/client';

  document.addEventListener('astro:page-load', (): void => {
    document
      .querySelectorAll<HTMLAnchorElement>('article a')
      .forEach((el: HTMLAnchorElement): void => {
        // If not an anchor
        if (!el.getAttribute('href')?.startsWith('#')) {
          return;
        }

        // Add listener
        el.addEventListener('click', (ev: MouseEvent): void => {
          // Prevent default
          ev.preventDefault();

          // Get target element
          const target: HTMLElement | null = document.querySelector(
            el.getAttribute('href')!
          );
          if (target === null) {
            return;
          }

          // Scroll to element
          window.scrollTo({
            top: window.scrollY + target.getBoundingClientRect().top - 80,
            behavior: 'smooth'
          });
        });
      });

    document
      .querySelector<HTMLButtonElement>('#back-posts-btn')
      ?.addEventListener('click', (): void => {
        navigate('/posts');
      });
  });
</script>
